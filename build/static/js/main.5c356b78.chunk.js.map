{"version":3,"sources":["components/Temp.js","components/Geo.js","components/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["Temp","lat","lon","useState","state","setState","useEffect","axios","get","then","response","data","console","log","temp","main","wind","speed","precip","weather","description","catch","error","Math","round","class","role","aria-label","Geo","props","getGeoInfo","countryName","country_name","cityName","city","latitude","longitude","this","Component","Layout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAmEeA,EAhEF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAAU,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,KAG7BC,qBAAU,WACJL,GAAOC,GACTK,IACGC,IADH,6DAE0DP,EAF1D,gBAEqEC,EAFrE,4CAIGO,MAAK,SAACC,GACL,IAAIC,EAAOD,EAASC,KACpBC,QAAQC,IAAIF,GACZN,EAAS,CACPS,KAAMH,EAAKI,KAAKD,KAChBE,KAAML,EAAKK,KAAKC,MAChBC,OAAQP,EAAKQ,QAAQ,GAAGC,iBAG3BC,OAAM,SAACC,GACNV,QAAQC,IAAIS,QAGjB,CAACrB,EAAKC,EAAKG,IACd,IAAMS,EAAOS,KAAKC,MAAMpB,EAAMU,KAAO,QAC/BE,EAAOO,KAAKC,MAAmB,IAAbpB,EAAMY,MAC9B,OAAIF,EAAO,GAAKE,EAAO,GAEnB,gCACE,qBAAKS,MAAM,kBAAX,8CACA,qBAAKC,KAAK,MAAMC,aAAW,SAA3B,kDAGA,sBAAKF,MAAM,iBAAX,mBACSX,EADT,aACyBE,EADzB,UACsCZ,EAAMc,aAIvCJ,EAAO,GAAKE,EAAO,GAE1B,gCACE,qBAAKS,MAAM,kBAAX,+CACA,qBAAKC,KAAK,MAAMC,aAAW,SAA3B,kDAGA,sBAAKF,MAAM,iBAAX,mBACSX,EADT,aACyBE,EADzB,UACsCZ,EAAMc,aAM9C,gCACE,qBAAKO,MAAM,kBAAX,iCACA,qBAAKC,KAAK,MAAMC,aAAW,SAA3B,kDAGA,sBAAKF,MAAM,iBAAX,mBACSX,EADT,aACyBE,EADzB,UACsCZ,EAAMc,OAD5C,WCbOU,E,kDAzCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,WAAa,WACXvB,IACGC,IAAI,0BACJC,MAAK,SAACC,GACL,IAAIC,EAAOD,EAASC,KACpB,EAAKN,SAAS,CACZ0B,YAAapB,EAAKqB,aAClBC,SAAUtB,EAAKuB,KACfC,SAAUxB,EAAKwB,SACfC,UAAWzB,EAAKyB,eAGnBf,OAAM,SAACC,GACNV,QAAQC,IAAIS,OApBhB,EAAKlB,MAAQ,CACX2B,YAAa,GACbE,SAAU,GACVhC,IAAK,KACLC,IAAK,MANU,E,qDAyBnB,WACEmC,KAAKP,e,oBAGP,WACE,OACE,sBAAKL,MAAM,UAAX,UACE,cAAC,EAAD,CAAMxB,IAAKoC,KAAKjC,MAAM+B,SAAUjC,IAAKmC,KAAKjC,MAAMgC,YAChD,oBAAGX,MAAM,aAAT,UACGY,KAAKjC,MAAM6B,SADd,KAC0BI,KAAKjC,MAAM2B,sB,GAnC3BO,aCgBHC,G,kKAhBb,WACE,OACE,8BACE,yBAASd,MAAM,gCAAf,SACE,qBAAKA,MAAM,+BAAX,SAEE,oBAAIA,MAAM,KAAV,SACE,cAAC,EAAD,gB,GAROa,c,MCQNE,MAJf,WACE,OAAO,cAAC,EAAD,KCIMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5c356b78.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Temp = ({ lat, lon }) => {\n  const [state, setState] = useState({});\n\n  useEffect(() => {\n    if (lat && lon) {\n      axios\n        .get(\n          `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=8f61a1e09924a4c204d0927cfe0ff964`\n        )\n        .then((response) => {\n          let data = response.data;\n          console.log(data);\n          setState({\n            temp: data.main.temp,\n            wind: data.wind.speed,\n            precip: data.weather[0].description,\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, [lat, lon, setState]);\n  const temp = Math.round(state.temp - 273.15);\n  const wind = Math.round(state.wind * 3.6);\n  if (temp < 0 || wind > 20) {\n    return (\n      <div>\n        <div class=\"pa3 f1 lh-title\">You should probably stay inside.</div>\n        <div role=\"img\" aria-label=\"Flower\">\n          ðŸŒºðŸŒ»ðŸŒ²\n        </div>\n        <div class=\"pa3 f6 lh-copy\">\n          Temp: {temp}C | Wind: {wind}km/h | {state.precip}\n        </div>\n      </div>\n    );\n  } else if (temp > 0 && wind < 20) {\n    return (\n      <div>\n        <div class=\"pa3 f1 lh-title\">Bundle up, but it should be fine!</div>\n        <div role=\"img\" aria-label=\"Flower\">\n          ðŸŒºðŸŒ»ðŸŒ²\n        </div>\n        <div class=\"pa3 f6 lh-copy\">\n          Temp: {temp}C | Wind: {wind}km/h | {state.precip}\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <div class=\"pa3 f1 lh-title\">Yes, go for a walk!</div>\n        <div role=\"img\" aria-label=\"Flower\">\n          ðŸŒºðŸŒ»ðŸŒ²\n        </div>\n        <div class=\"pa3 f6 lh-copy\">\n          Temp: {temp} C, Wind: {wind} km/h, {state.precip}.\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Temp;\n","import React, { Component, useState } from \"react\";\nimport axios from \"axios\";\nimport Temp from \"./Temp\";\n\nclass Geo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countryName: \"\",\n      cityName: \"\",\n      lat: null,\n      lon: null,\n    };\n  }\n  getGeoInfo = () => {\n    axios\n      .get(\"https://ipapi.co/json/\")\n      .then((response) => {\n        let data = response.data;\n        this.setState({\n          countryName: data.country_name,\n          cityName: data.city,\n          latitude: data.latitude,\n          longitude: data.longitude,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  componentDidMount() {\n    this.getGeoInfo();\n  }\n\n  render() {\n    return (\n      <div class=\"pa3 fw3\">\n        <Temp lat={this.state.latitude} lon={this.state.longitude} />\n        <p class=\"f6 lh-copy\">\n          {this.state.cityName}, {this.state.countryName}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Geo;\n","import React, { Component } from \"react\";\nimport Geo from \"./Geo\";\n\nclass Layout extends Component {\n  render() {\n    return (\n      <div>\n        <article class=\"vh-100 dt w-100 bg-light-blue\">\n          <div class=\"dtc v-mid tc white ph3 ph4-l\">\n            {/* <h1 class=\"f6 f2-m f-subheadline-l fw6 tc\"> */}\n            <h1 class=\"f3\">\n              <Geo />\n            </h1>\n          </div>\n        </article>\n      </div>\n    );\n  }\n}\n\nexport default Layout;\n","import \"./App.css\";\nimport \"./components/Geo\";\nimport tachyons from \"tachyons\";\nimport React, { Component, useState } from \"react\";\nimport Layout from \"./components/Layout\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return <Layout />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}